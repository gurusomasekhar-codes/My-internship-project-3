<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Freelancer Invoice Generator</title>
  <!-- Tailwind CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- React + ReactDOM CDN -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <!-- Babel for JSX -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body class="bg-gray-100">
  <div id="root"></div>

  <script type="text/babel">
    function App() {
      const [items, setItems] = React.useState([{ name: "", qty: 1, rate: 0 }]);
      const [details, setDetails] = React.useState({
        freelancer: "",
        client: "",
        invoiceNo: "INV-001",
        date: "",
        dueDate: "",
        tax: 0,
        discount: 0,
        notes: ""
      });

      const addRow = () => setItems([...items, { name: "", qty: 1, rate: 0 }]);
      const removeRow = (i) => setItems(items.filter((_, idx) => idx !== i));

      const subtotal = items.reduce((sum, i) => sum + i.qty * i.rate, 0);
      const taxAmt = (subtotal * details.tax) / 100;
      const discountAmt = (subtotal * details.discount) / 100;
      const total = subtotal + taxAmt - discountAmt;

      return (
        <div className="min-h-screen p-6 flex flex-col gap-6">
          <h1 className="text-3xl font-bold text-center">Invoice Generator</h1>
          <p className="text-center text-gray-600">
            Create, Preview, and Send in Seconds
          </p>

          <div className="grid md:grid-cols-2 gap-6">
            {/* Input Section */}
            <div className="bg-white shadow rounded p-4 space-y-4">
              <h2 className="font-semibold">Freelancer & Client Info</h2>
              <input
                placeholder="Your Name / Business Name"
                className="w-full border p-2 rounded"
                value={details.freelancer}
                onChange={(e) => setDetails({ ...details, freelancer: e.target.value })}
              />
              <input
                placeholder="Client Name"
                className="w-full border p-2 rounded"
                value={details.client}
                onChange={(e) => setDetails({ ...details, client: e.target.value })}
              />

              <h2 className="font-semibold">Invoice Details</h2>
              <input
                placeholder="Invoice Number"
                className="w-full border p-2 rounded"
                value={details.invoiceNo}
                onChange={(e) => setDetails({ ...details, invoiceNo: e.target.value })}
              />
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="date"
                  className="border p-2 rounded"
                  value={details.date}
                  onChange={(e) => setDetails({ ...details, date: e.target.value })}
                />
                <input
                  type="date"
                  className="border p-2 rounded"
                  value={details.dueDate}
                  onChange={(e) => setDetails({ ...details, dueDate: e.target.value })}
                />
              </div>

              <h2 className="font-semibold">Itemized Billing</h2>
              {items.map((item, i) => (
                <div key={i} className="grid grid-cols-4 gap-2 mb-2">
                  <input
                    placeholder="Item"
                    className="border p-2 rounded"
                    value={item.name}
                    onChange={(e) =>
                      setItems(items.map((it, idx) =>
                        idx === i ? { ...it, name: e.target.value } : it
                      ))
                    }
                  />
                  <input
                    type="number"
                    placeholder="Qty"
                    className="border p-2 rounded"
                    value={item.qty}
                    onChange={(e) =>
                      setItems(items.map((it, idx) =>
                        idx === i ? { ...it, qty: +e.target.value } : it
                      ))
                    }
                  />
                  <input
                    type="number"
                    placeholder="Rate"
                    className="border p-2 rounded"
                    value={item.rate}
                    onChange={(e) =>
                      setItems(items.map((it, idx) =>
                        idx === i ? { ...it, rate: +e.target.value } : it
                      ))
                    }
                  />
                  <button
                    className="bg-red-500 text-white px-2 rounded"
                    onClick={() => removeRow(i)}
                  >
                    X
                  </button>
                </div>
              ))}
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded"
                onClick={addRow}
              >
                + Add Row
              </button>

              <h2 className="font-semibold">Summary</h2>
              <input
                type="number"
                placeholder="Tax %"
                className="w-full border p-2 rounded"
                value={details.tax}
                onChange={(e) => setDetails({ ...details, tax: +e.target.value })}
              />
              <input
                type="number"
                placeholder="Discount %"
                className="w-full border p-2 rounded"
                value={details.discount}
                onChange={(e) => setDetails({ ...details, discount: +e.target.value })}
              />
              <textarea
                placeholder="Notes / Terms"
                className="w-full border p-2 rounded"
                value={details.notes}
                onChange={(e) => setDetails({ ...details, notes: e.target.value })}
              />

              <div className="flex gap-2">
                <button className="flex-1 bg-gray-500 text-white py-2 rounded">Preview</button>
                <button className="flex-1 bg-green-500 text-white py-2 rounded">Download PDF</button>
                <button className="flex-1 bg-blue-600 text-white py-2 rounded">Send</button>
              </div>
            </div>

            {/* Preview Section */}
            <div className="bg-white shadow rounded p-4">
              <h2 className="text-xl font-bold mb-2">Invoice Preview</h2>
              <div className="border p-4 rounded bg-white">
                <h3 className="font-semibold">{details.freelancer}</h3>
                <p>Bill To: {details.client}</p>
                <p>Invoice No: {details.invoiceNo}</p>
                <p>Date: {details.date}</p>
                <p>Due Date: {details.dueDate}</p>

                <table className="w-full mt-4 border">
                  <thead>
                    <tr className="bg-gray-200">
                      <th className="p-2 border">Item</th>
                      <th className="p-2 border">Qty</th>
                      <th className="p-2 border">Rate</th>
                      <th className="p-2 border">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {items.map((item, i) => (
                      <tr key={i}>
                        <td className="border p-2">{item.name}</td>
                        <td className="border p-2">{item.qty}</td>
                        <td className="border p-2">{item.rate}</td>
                        <td className="border p-2">{item.qty * item.rate}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>

                <div className="mt-4 space-y-1">
                  <p>Subtotal: {subtotal}</p>
                  <p>Tax: {taxAmt}</p>
                  <p>Discount: -{discountAmt}</p>
                  <p className="font-bold">Final Total: {total}</p>
                </div>

                <p className="mt-4 text-sm">{details.notes}</p>
              </div>
            </div>
          </div>
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(<App />);
  </script>
</body>
</html>
